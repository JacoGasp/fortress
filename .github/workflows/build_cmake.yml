# Based on https://gist.github.com/cristianadam/49dfee3ce6fd359cda5f3b44e0d93536 
# and https://www.qt.io/blog/building-qt-creator-plugins-with-github-actions

name: Qt Cmake Build

on: workflow_dispatch

env:
  QT_NAME: qt6
  QT_VERSION: 6.0.2
  
  DESKTOP_APP_NAME: Fortress
  SERVER_APP_NAME:  SimpleServer
  OUTPUT_DIR: ${GITHUB_WORKSPACE}/output
  
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: 
          - name: "Linux Latest x64"
            artifact: "Linux-x64.tar.gz"
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Installing Dependency
        shell: bash
        run: |
          if [ "$RUNNER_OS" == Linux ]; then
            sudo apt update
            sudo apt install -y libgl1-mesa-dev libasio-dev libxkbcommon-x11-0 cmake
            wget https://github.com/QuasarApp/CQtDeployer/releases/download/1.5.1/CQtDeployer_1.5.1_Linux64.zip 
            unzip CQtDeployer*.zip -d cqtdeployer
            chmod +x cqtdeployer/cqtdeployer.sh cqtdeployer/bin/*
          fi
         

      - name: Download Qt
        id: qt
        shell: cmake -P {0}
        run: | # Cmake script:
          set(qt_version $ENV{QT_VERSION})
          set(qt_name $ENV{QT_NAME})
          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          if ("${{ runner.os }}" STREQUAL "Linux")
           set(url_os "linux_x64")
           set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.gcc_64")
           set(qt_dir_prefix "${qt_version}/gcc_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
           set(url_os "mac_x64")
           set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.clang_64")
           set(qt_dir_prefix "${qt_version}/clang_64")
          endif()
           
          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/${qt_name}_${qt_version_dotless}")

          # Download the manifest file to read which packages are available to download
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
          file(READ ./Updates.xml updates_xml)
          
          string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
            update_xml_output "${updates_xml}")
            
          set(package_version ${CMAKE_MATCH_1})
          set(package_suffix ${CMAKE_MATCH_2})
          
          message("Package: ${package_version} ${package_suffix}")
          
          string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

          # Workaround for CMake's greedy regex (WinOnly)

          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
          endif()
          file(MAKE_DIRECTORY ${qt_name})

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${qt_name}/${qt_dir_prefix}" qt_dir)
          message("::set-output name=qt_dir::${qt_dir}")
    
          foreach(package qtbase qtdeclarative qttools qtquickcontrols2)
            message("${qt_base_url}/${qt_package_name}/${package_version}${package}${packge_suffix}")
            file (DOWNLOAD "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" "./${package}.7z" SHOW_PROGRESS)
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY "${qt_name}")
          endforeach()

          # uic depends on libicu56.so
          if ("${{ runner.os }}" STREQUAL "Linux")
            file(DOWNLOAD 
              "${qt_base_url}/${qt_package_name}/${package_version}icu-linux-Rhel7.2-x64.7z" 
              "./icu.7z" SHOW_PROGRESS)
              execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../icu.7z WORKING_DIRECTORY "${qt_name}")
          endif()
          
          file(READ "${qt_name}/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
          string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
          string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
          string(REPLACE "licheck64" "" qtconfig "${qtconfg}")
          string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
          file(WRITE "${qt_name}/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

      - name: Configure
        run: |
          mkdir build && cd build
          # TODO: fix for linux

          export PATH="${{ steps.qt.outputs.qt_dir }}/bin:${PATH}"
          export LD_LIBRARY_PATH="${{ steps.qt.outputs.qt_dir }}/lib:{LD_LIBRARY_PATH}"

          cmake -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" ../
          
          
      - name: Build
        shell: cmake -P {0}
        run: |
          include(ProcessorCount)
          ProcessorCount(N) 
          
          set(make_cmd make -j ${N})
          execute_process(COMMAND ${make_cmd} WORKING_DIRECTORY build RESULT_VARIABLE result)
          
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
    
      - name: Bundle
        run: |
          mkdir ${{ runner.os }}
          mkdir ${{ runner.os }}/server
          mkdir ${{ runner.os }}/client

          if [ $RUNNER_OS == "Linux" ]; then
            ./cqtdeployer/cqtdeployer.sh -bin ./build/app/Fortress -qmlDir ./qml -targetDir ${{ runner.os }}/client
            ./cqtdeployer/cqtdeployer.sh -bin ./build/NetworkingExample/SimpleServer -targetDir ${{ runner.os }}/server
          fi

      - uses: actions/upload-artifact@v2
        id: upload_artifact
        with:
          path: ./${{ runner.os }}
          name: ${{ matrix.config.artifact }}

    release:
      if: contains(github.ref, 'tags/v')
      runs-on: ubuntu-latest
      needs: build

      steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}