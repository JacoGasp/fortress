# Based on https://gist.github.com/cristianadam/49dfee3ce6fd359cda5f3b44e0d93536 
# and https://www.qt.io/blog/building-qt-creator-plugins-with-github-actions

name: Qt Cmake Build

on: workflow_dispatch

env:
  QT_NAME: qt6
  QT_VERSION: 6.0.2
  
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config: 
          - name: "Linux Latest x64"
            artifact: "Linux-x64.zip"
            os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Installing system libraries
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Linux")
            execute_process(
              COMMAND sudo apt install libgl1-mesa-dev libasio-dev -y
            )
          endif()

      - name: Download Qt
        shell: cmake -P {0}
        run: | # Cmake script:
          set(qt_version $ENV{QT_VERSION})
          set(qt_name $ENV{QT_NAME})

          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          if ("${{ runner.os }}" STREQUAL "Linux")
           set(url_os "linux_x64")
           set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.gcc_64")
           set(qt_dir_prefix "${qt_version}/gcc_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
           set(url_os "mac_x64")
           set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.clang_64")
           set(qt_dir_prefix "${qt_version}/clang_64")
          endif()
           
          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/${qt_name}_${qt_version_dotless}")

          # Download the manifest file to read which packages are available to download
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
          file(READ ./Updates.xml updates_xml)
          
          string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
            update_xml_output "${updates_xml}")
            
          set(package_version ${CMAKE_MATCH_1})
          set(package_suffix ${CMAKE_MATCH_2})
          
          message("Package: ${package_version} ${package_suffix}")
          
          string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

          # Workaround for CMake's greedy regex (WinOnly)

          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
          endif()
          file(MAKE_DIRECTORY ${qt_name})

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${qt_name}/${qt_dir_prefix}" qt_dir)
          message("::set-output name=qt_dir::${qt_dir}")
    
          foreach(package qtbase qtdeclarative qttools qtquick)
            file(DOWNLOAD "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" "./${package}.7z" SHOW_PROGRESS)
            execute_process(COMMAND ${CAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY ${qt_name})
          endforeach()
          
          file(GLOB files "*")
          foreach(file ${files})
            message(${file})
          endforeach()



