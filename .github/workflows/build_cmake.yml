# Based on https://gist.github.com/cristianadam/49dfee3ce6fd359cda5f3b44e0d93536 
# and https://www.qt.io/blog/building-qt-creator-plugins-with-github-actions

name: Qt Cmake Build

on:
  workflow_dispatch:
  push:
    tags:
      - v*
    pull_request:
      branches:
        - main

env:
  QT_NAME: qt6
  QT_VERSION: 6.2.2
  
  DESKTOP_APP_TARGET: Fortress
  SERVER_APP_TARGET: Server
  DESKTOP_APP_BUILD_FILE: app/Fortress
  SERVER_APP_BUILD_FILE: server/Server

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: "Linux Latest x64"
            artifact: "Linux-x64.tar.gz"
            bundle_name: "Linux-x64"
            os: ubuntu-latest
          - name: "macOS Latest x64"
            artifact: "macOS-x64.zip"
            bundle_name: "macOS-x64"
            os: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Installing Dependency
        shell: bash
        run: |
          if [ "$RUNNER_OS" == Linux ]; then
            sudo apt update
            sudo apt install -y libgl1-mesa-dev libasio-dev libxkbcommon-x11-0 cmake
            wget https://github.com/QuasarApp/CQtDeployer/releases/download/1.5.1/CQtDeployer_1.5.1_Linux64.zip 
            unzip CQtDeployer*.zip -d cqtdeployer
            chmod +x cqtdeployer/cqtdeployer.sh cqtdeployer/bin/*
          elif [ "$RUNNER_OS" == macOS ]; then
            brew install asio
            ln -s /usr/local/Cellar/asio/1.* /usr/local/Cellar/asio/current
          fi

      - name: Download Qt
        id: qt
        shell: cmake -P {0}
        run: | # Cmake script:
          set(qt_version $ENV{QT_VERSION})
          set(qt_name $ENV{QT_NAME})
          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          if ("${{ runner.os }}" STREQUAL "Linux")
           set(url_os "linux_x64")
           set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.gcc_64")
           set(qt_dir_prefix "${qt_version}/gcc_64")
           set(compiler "gcc_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
           set(url_os "mac_x64")
           set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.clang_64")
           set(qt_dir_prefix "${qt_version}/clang_64")
           set(compiler "clang_64")
          endif()
          
          set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/${qt_name}_${qt_version_dotless}")
          set(qt_addon_prefix "qt.${qt_name}.${qt_version_dotless}.addons")

          # Download the manifest file to read which packages are available to download
          file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
          file(READ ./Updates.xml updates_xml)
          
          string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
            update_xml_output "${updates_xml}")

          set(package_version ${CMAKE_MATCH_1})
          set(package_suffix ${CMAKE_MATCH_2})
          
          message("Package: ${package_version} ${package_suffix}")
          
          string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

          # Workaround for CMake's greedy regex (WinOnly)

          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
          endif()
          file(MAKE_DIRECTORY ${qt_name})

          # Save the path for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${qt_name}/${qt_dir_prefix}" qt_dir)
          message("::set-output name=qt_dir::${qt_dir}")
          
          foreach(package qtbase qtdeclarative qttools qtquickcontrols2 qtcharts)
            message("${qt_base_url}/${qt_package_name}/${package_version}${package}${packge_suffix}")
            file (DOWNLOAD "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" "./${package}.7z" SHOW_PROGRESS)
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY "${qt_name}")
          endforeach()

          # Download addons
          foreach (addon qtcharts)
            message("${qt_base_url}/${qt_addon_prefix}.${addon}.${compiler}/${package_version}${addon}${package_suffix}.7z")
            file (DOWNLOAD "${qt_base_url}/${qt_addon_prefix}.${addon}.${compiler}/${package_version}${addon}${package_suffix}.7z" "./${addon}.7z" SHOW_PROGRESS)
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${addon}.7z WORKING_DIRECTORY "${qt_name}")
          endforeach()

          # uic depends on libicu56.so
          if ("${{ runner.os }}" STREQUAL "Linux")
            file(DOWNLOAD 
              "${qt_base_url}/${qt_package_name}/${package_version}icu-linux-Rhel7.2-x64.7z" 
              "./icu.7z" SHOW_PROGRESS)
              execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../icu.7z WORKING_DIRECTORY "${qt_name}")
          endif()
          
          # Not working anymore with Qt 6.2.2
          # file(READ "${qt_name}/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
          # string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
          # string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
          # string(REPLACE "licheck64" "" qtconfig "${qtconfg}")
          # string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
          # file(WRITE "${qt_name}/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

      - name: Configure
        run: |
          mkdir build && cd build
          # TODO: fix for linux

          export PATH="${{ steps.qt.outputs.qt_dir }}/bin:${PATH}"
          export LD_LIBRARY_PATH="${{ steps.qt.outputs.qt_dir }}/lib:{LD_LIBRARY_PATH}"

          cmake -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" -DCMAKE_BUILD_TYPE=Release ../


      - name: Build
        shell: cmake -P {0}
        run: |
          include(ProcessorCount)
          ProcessorCount(N) 
          
          set(make_cmd make $ENV{DESKTOP_APP_TARGET} $ENV{SERVER_APP_TARGET} -j ${N})
          execute_process(COMMAND ${make_cmd} WORKING_DIRECTORY build RESULT_VARIABLE result)
          
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()

      - name: Bundle
        run: |
          bundle_dir=${{ matrix.config.bundle_name }}
          mkdir ${bundle_dir}

          if [ $RUNNER_OS == "Linux" ]; then
            mkdir ${bundle_dir}/Fortress
            ./cqtdeployer/cqtdeployer.sh -bin ./build/${DESKTOP_APP_BUILD_FILE} -qmlDir ./qml -targetDir ${bundle_dir}/Fortress
            mv ./build/${SERVER_APP_BUILD_FILE} ./${bundle_dir}
            tar -cvf ${{ matrix.config.artifact }} ./${bundle_dir}

          elif [ "$RUNNER_OS" == macOS ]; then
            # Fix macdeployqt not copying this framework
            mkdir ./build/app/Fortress.app/Contents/Frameworks/
            cp -r ${{ steps.qt.outputs.qt_dir }}/lib/QtQuickControls2Impl.framework ./build/app/Fortress.app/Contents/Frameworks/
            ${{ steps.qt.outputs.qt_dir }}/bin/macdeployqt ./build/${DESKTOP_APP_BUILD_FILE}.app -qmldir=./qml -dmg
            mv ./build/${DESKTOP_APP_BUILD_FILE}.dmg ${bundle_dir}
            mv ./build/${SERVER_APP_BUILD_FILE} ${bundle_dir}
            zip -r ${{ matrix.config.artifact }} ./${bundle_dir} 
          fi

      - uses: actions/upload-artifact@v2
        id: upload_artifact
        with:
          path: ./${{ matrix.config.artifact}}
          name: ${{ matrix.config.artifact }}

  release:
    name: Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - name: Store Release URL
        run: |
          echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

      - uses: actions/upload-artifact@v1
        with:
          path: ./upload_url
          name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - name: "Linux Latest x64"
            artifact: Linux-x64.tar.gz
            os: ubuntu-latest
          - name: "macOS Latest x64"
            artifact: "macOS-x64.zip"
            os: ubuntu-latest
    needs: release

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.config.artifact }}
          path: ./

      - name: Download URL
        uses: actions/download-artifact@v1
        with:
          name: upload_url
          path: ./

      - id: set_upload_url
        run: |
          upload_url=`cat ./upload_url`
          echo ::set-output name=upload_url::$upload_url

      - name: Upload to Release
        id: upload_to_release
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: application/zip
    
