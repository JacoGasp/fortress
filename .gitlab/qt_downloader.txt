set (qt_name $ENV{QT_NAME})
set (qt_version $ENV{QT_VERSION})

string(REPLACE "." "" qt_version_dotless "${qt_version}")

message("QT Name: ${qt_name}")

if (UNIX AND NOT APPLE)
    set(url_os "linux_x64")
    set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.gcc_64")
    set(qt_dir_prefix "${qt_version}/gcc_64")
    set(compiler "gcc_64")
elseif (APPLE)
    set(url_os "mac_x64")
    set(qt_package_name "qt.${qt_name}.${qt_version_dotless}.clang_64")
    set(qt_dir_prefix "${qt_version}/clang_64")
    set(compiler "clang_64")
endif()

set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/${qt_name}_${qt_version_dotless}")
set(qt_addon_prefix "qt.${qt_name}.${qt_version_dotless}.addons")

# Download the manifest file to read which packages are available to download
file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)
file(READ ./Updates.xml updates_xml)

string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
update_xml_output "${updates_xml}")

set(package_version ${CMAKE_MATCH_1})
set(package_suffix ${CMAKE_MATCH_2})

message("Package: ${package_version} ${package_suffix}")

string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

# Workaround for CMake's greedy regex (WinOnly)

# if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
# string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
# endif()

file(MAKE_DIRECTORY ${qt_name})

# Save the path for other steps
file(TO_CMAKE_PATH "$CI_PROJECT_DIR/${qt_name}/${qt_dir_prefix}" qt_dir)
message("::set-output name=qt_dir::${qt_dir}")

foreach(package qtbase qtdeclarative qttools qtquickcontrols2 qtcharts)
message("${qt_base_url}/${qt_package_name}/${package_version}${package}${packge_suffix}")
file (DOWNLOAD "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" "./${package}.7z" SHOW_PROGRESS)
execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY "${qt_name}")
endforeach()

# Download addons
foreach (addon qtcharts)
message("${qt_base_url}/${qt_addon_prefix}.${addon}.${compiler}/${package_version}${addon}${package_suffix}.7z")
file (DOWNLOAD "${qt_base_url}/${qt_addon_prefix}.${addon}.${compiler}/${package_version}${addon}${package_suffix}.7z" "./${addon}.7z" SHOW_PROGRESS)
execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${addon}.7z WORKING_DIRECTORY "${qt_name}")
endforeach()

# uic depends on libicu56.so
if (UNIX AND NOT APPLE)
file(DOWNLOAD 
    "${qt_base_url}/${qt_package_name}/${package_version}icu-linux-Rhel7.2-x64.7z" 
    "./icu.7z" SHOW_PROGRESS)
    execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../icu.7z WORKING_DIRECTORY "${qt_name}")
endif()

file(READ "${qt_name}/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
string(REPLACE "licheck64" "" qtconfig "${qtconfg}")
string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
file(WRITE "${qt_name}/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

set(ENV{QT_PATH} "${qt_name}/${qt_dir_prefix}")